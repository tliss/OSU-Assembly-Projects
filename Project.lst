Microsoft (R) Macro Assembler Version 14.00.24210.0	    04/16/17 15:07:54
/Prog01 - Elementary Arithmetic     (Prog01.asm		     Page 1 - 1



				TITLE Prog01 - Elementary Arithmetic     (Prog01.asm)

				; Author: Taylor Liss
				; Email: lisst@oregonstate.edu
				; Course / Project ID  CS271_400_S2017 / Prog01
				; Date: 4/15/2017
				; Description: This program dsplays my name and the program
				;	title on the output screen and instructs the user to
				;	enter in two numbers. It then calculates the sum,
				;	difference, product, (integer) quotent, and remainder
				;	of the two numbers. It then displays a terminating
				;	message.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)

 00000000			.data
 00000000 00000000		firstNum	DWORD	?	;first number to be entered by user
 00000004 00000000		secondNum	DWORD	?	;second number to be entered by user
 00000008 00000000		addResult	DWORD	?	;result for addition
 0000000C 00000000		subResult	DWORD	?	;result for subtraction
 00000010 00000000		mulResult	DWORD	?	;result for multiplication
 00000014 00000000		divResult	DWORD	?	;result for division
 00000018 00000000		remResult	DWORD	?	;result for remainder
 0000001C 09 09 50 72 6F	titleMess	BYTE	"		Prog01 - Elementary Arithmetic		by Taylor Liss", 0dh, 0ah, 0
	   67 30 31 20 2D
	   20 45 6C 65 6D
	   65 6E 74 61 72
	   79 20 41 72 69
	   74 68 6D 65 74
	   69 63 09 09 62
	   79 20 54 61 79
	   6C 6F 72 20 4C
	   69 73 73 0D 0A
	   00
 0000004F 45 6E 74 65 72	intro		BYTE	"Enter 2 numbers, and I'll show you the sum, difference, product, quotient, and remainder.",0dh,0ah,0
	   20 32 20 6E 75
	   6D 62 65 72 73
	   2C 20 61 6E 64
	   20 49 27 6C 6C
	   20 73 68 6F 77
	   20 79 6F 75 20
	   74 68 65 20 73
	   75 6D 2C 20 64
	   69 66 66 65 72
	   65 6E 63 65 2C
	   20 70 72 6F 64
	   75 63 74 2C 20
	   71 75 6F 74 69
	   65 6E 74 2C 20
	   61 6E 64 20 72
	   65 6D 61 69 6E
	   64 65 72 2E 0D
	   0A 00
 000000AB 46 69 72 73 74	prompt01	BYTE	"First number: ", 0
	   20 6E 75 6D 62
	   65 72 3A 20 00
 000000BA 53 65 63 6F 6E	prompt02	BYTE	"Second number: ", 0
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 000000CA 20 2B 20 00		sumMess		BYTE	" + ", 0
 000000CE 20 2D 20 00		diffMess	BYTE	" - ", 0
 000000D2 20 78 20 00		prodMess	BYTE	" x ", 0
 000000D6 20 2F 20 00		quotMess	BYTE	" / ", 0
 000000DA 20 3D 20 00		equMess		BYTE	" = ", 0
 000000DE 20 72 65 6D 61	remMess		BYTE	" remainder ", 0
	   69 6E 64 65 72
	   20 00
 000000EA 4E 6F 74 20 62	notBadMess	BYTE	"Not bad, huh?", 0dh, 0ah, 0
	   61 64 2C 20 68
	   75 68 3F 0D 0A
	   00
 000000FA 47 6F 6F 64 62	goodbyeMess	BYTE	"Goodbye!", 0dh, 0ah, 0
	   79 65 21 0D 0A
	   00

				;EC  #1
 00000105 2A 2A 45 43 20	extraCred01	BYTE	"**EC #1: Program repeats until the user chooses to quit", 0
	   23 31 3A 20 50
	   72 6F 67 72 61
	   6D 20 72 65 70
	   65 61 74 73 20
	   75 6E 74 69 6C
	   20 74 68 65 20
	   75 73 65 72 20
	   63 68 6F 6F 73
	   65 73 20 74 6F
	   20 71 75 69 74
	   00
 0000013D 57 6F 75 6C 64	startAgain	BYTE	"Would you like to go again? (y/n)", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 67 6F
	   20 61 67 61 69
	   6E 3F 20 28 79
	   2F 6E 29 00
 0000015F 00			again		BYTE	?	;user's y/n response

				;EC #2
 00000160 2A 2A 45 43 20	extraCred02	BYTE	"**EC #2: Program verifies second number less than first", 0
	   23 32 3A 20 50
	   72 6F 67 72 61
	   6D 20 76 65 72
	   69 66 69 65 73
	   20 73 65 63 6F
	   6E 64 20 6E 75
	   6D 62 65 72 20
	   6C 65 73 73 20
	   74 68 61 6E 20
	   66 69 72 73 74
	   00
 00000198 54 68 65 20 73	lessThan	BYTE	"The second number must be less than the first!", 0dh, 0ah, 0
	   65 63 6F 6E 64
	   20 6E 75 6D 62
	   65 72 20 6D 75
	   73 74 20 62 65
	   20 6C 65 73 73
	   20 74 68 61 6E
	   20 74 68 65 20
	   66 69 72 73 74
	   21 0D 0A 00

				;EC #3
 000001C9 2A 2A 45 43 20	extraCred03	BYTE	"**EC #3: Program displays the quotient as a floating-point number, rounded to the nearest .001", 0dh, 0ah, 0
	   23 33 3A 20 50
	   72 6F 67 72 61
	   6D 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   71 75 6F 74 69
	   65 6E 74 20 61
	   73 20 61 20 66
	   6C 6F 61 74 69
	   6E 67 2D 70 6F
	   69 6E 74 20 6E
	   75 6D 62 65 72
	   2C 20 72 6F 75
	   6E 64 65 64 20
	   74 6F 20 74 68
	   65 20 6E 65 61
	   72 65 73 74 20
	   2E 30 30 31 0D
	   0A 00
 0000022A 00000000		firstDiv	DWORD	?	;The quotient after multiplying by 1000 and dividing by secondNum
 0000022E 00000000		firstRem	DWORD	?	;The remainder after multiplying by 100 and dividing by secondNum
 00000232 00000000		doubRem		DWORD	?	;firstRem times 2
 00000236 2E 00			dotMess		BYTE	".", 0
 00000238 00000000		wholeNum	DWORD	?	;The whole part of the quotient
 0000023C 00000000		decNum		DWORD	?	;The decimal part of the quotient
 00000240 2A 2A 45 43 20	ecMess		BYTE	"**EC #3: Your quotient expressed as a floating-point is: ", 0
	   23 33 3A 20 59
	   6F 75 72 20 71
	   75 6F 74 69 65
	   6E 74 20 65 78
	   70 72 65 73 73
	   65 64 20 61 73
	   20 61 20 66 6C
	   6F 61 74 69 6E
	   67 2D 70 6F 69
	   6E 74 20 69 73
	   3A 20 00

 00000000			.code
 00000000			main PROC
					
 00000000			startPoint: ;Program restarts to here when request.

				;Display program title & instructions
 00000000  BA 0000001C R		mov		edx, OFFSET titleMess
 00000005  E8 00000000 E		call	WriteString	
 0000000A  BA 00000105 R		mov		edx, OFFSET extraCred01
 0000000F  E8 00000000 E		call	WriteString
 00000014  E8 00000000 E		call	CrLf
 00000019  BA 00000160 R		mov		edx, OFFSET extraCred02
 0000001E  E8 00000000 E		call	WriteString
 00000023  E8 00000000 E		call	CrLf
 00000028  BA 000001C9 R		mov		edx, OFFSET extraCred03
 0000002D  E8 00000000 E		call	WriteString
 00000032  E8 00000000 E		call	CrLf
 00000037  BA 0000004F R		mov		edx, OFFSET intro
 0000003C  E8 00000000 E		call	WriteString
 00000041  E8 00000000 E		call	CrLf

				;Get first number
 00000046  BA 000000AB R		mov		edx, OFFSET prompt01
 0000004B  E8 00000000 E		call	WriteString
 00000050  E8 00000000 E		call	ReadInt
 00000055  A3 00000000 R		mov		firstNum, eax

				;Get second number
 0000005A  BA 000000BA R		mov		edx, OFFSET prompt02
 0000005F  E8 00000000 E		call	WriteString
 00000064  E8 00000000 E		call	ReadInt
 00000069  A3 00000004 R		mov		secondNum, eax
 0000006E  E8 00000000 E		call	CrLf

				;EC #2: This compare the numbers and stops the program if the second number is greater than the first
 00000073  A1 00000000 R		mov		eax, firstNum
 00000078  8B 1D 00000004 R		mov		ebx, secondNum
 0000007E  3B C3			cmp		eax, ebx
 00000080  0F 8C 000001C1		jl		lessJump

				;calculate and display sum
 00000086  A1 00000000 R		mov		eax, firstNum
 0000008B  E8 00000000 E		call	WriteDec
 00000090  BA 000000CA R		mov		edx, OFFSET sumMess
 00000095  E8 00000000 E		call	WriteString
 0000009A  A1 00000004 R		mov		eax, secondNum
 0000009F  E8 00000000 E		call	WriteDec
 000000A4  BA 000000DA R		mov		edx, OFFSET equMess
 000000A9  E8 00000000 E		call	WriteString

 000000AE  A1 00000000 R		mov		eax, firstNum
 000000B3  03 05 00000004 R		add		eax, secondNum
 000000B9  A3 00000008 R		mov		addResult, eax
 000000BE  A1 00000008 R		mov		eax, addResult
 000000C3  E8 00000000 E		call	WriteDec
 000000C8  E8 00000000 E		call	CrLf

				;calculate and display difference
 000000CD  A1 00000000 R		mov		eax, firstNum
 000000D2  E8 00000000 E		call	WriteDec
 000000D7  BA 000000CE R		mov		edx, OFFSET diffMess
 000000DC  E8 00000000 E		call	WriteString
 000000E1  A1 00000004 R		mov		eax, secondNum
 000000E6  E8 00000000 E		call	WriteDec
 000000EB  BA 000000DA R		mov		edx, OFFSET equMess
 000000F0  E8 00000000 E		call	WriteString
					
 000000F5  A1 00000000 R		mov		eax, firstNum
 000000FA  2B 05 00000004 R		sub		eax, secondNum
 00000100  A3 0000000C R		mov		subResult, eax
 00000105  A1 0000000C R		mov		eax, subResult
 0000010A  E8 00000000 E		call	WriteDec
 0000010F  E8 00000000 E		call	CrLf

				;calculate and display the product
 00000114  A1 00000000 R		mov		eax, firstNum
 00000119  E8 00000000 E		call	WriteDec
 0000011E  BA 000000D2 R		mov		edx, OFFSET prodMess
 00000123  E8 00000000 E		call	WriteString
 00000128  A1 00000004 R		mov		eax, secondNum
 0000012D  E8 00000000 E		call	WriteDec
 00000132  BA 000000DA R		mov		edx, OFFSET equMess
 00000137  E8 00000000 E		call	WriteString

 0000013C  A1 00000000 R		mov		eax, firstNum
 00000141  8B 1D 00000004 R		mov		ebx, secondNum
 00000147  F7 E3			mul		ebx
 00000149  A3 00000010 R		mov		mulResult, eax
 0000014E  A1 00000010 R		mov		eax, mulResult
 00000153  E8 00000000 E		call	WriteDec
 00000158  E8 00000000 E		call	CrLf

				;calculate and display the quotient
 0000015D  A1 00000000 R		mov		eax, firstNum
 00000162  E8 00000000 E		call	WriteDec
 00000167  BA 000000D6 R		mov		edx, OFFSET quotMess
 0000016C  E8 00000000 E		call	WriteString
 00000171  A1 00000004 R		mov		eax, secondNum
 00000176  E8 00000000 E		call	WriteDec
 0000017B  BA 000000DA R		mov		edx, OFFSET equMess
 00000180  E8 00000000 E		call	WriteString

 00000185  99				cdq
 00000186  A1 00000000 R		mov		eax, firstNum
 0000018B  8B 1D 00000004 R		mov		ebx, secondNum
 00000191  F7 F3			div		ebx
 00000193  A3 00000014 R		mov		divResult, eax
 00000198  89 15 00000018 R		mov		remResult, edx
 0000019E  A1 00000014 R		mov		eax, divResult
 000001A3  E8 00000000 E		call	WriteDec
					
				;display the remainder
					
 000001A8  BA 000000DE R		mov		edx, OFFSET remMess
 000001AD  E8 00000000 E		call	WriteString
 000001B2  A1 00000018 R		mov		eax, remResult
 000001B7  E8 00000000 E		call	WriteDec
 000001BC  E8 00000000 E		call	CrLf
 000001C1  E8 00000000 E		call	CrLf

				;EC #3: This section calculates and displays the number as a floating point
						
						;Multiply firstNum by 10000 and divide it by seconNum
 000001C6  A1 00000000 R				mov		eax, firstNum
 000001CB  BB 000003E8					mov		ebx, 1000
 000001D0  F7 E3					mul		ebx
 000001D2  8B 1D 00000004 R				mov		ebx, secondNum
 000001D8  99						cdq
 000001D9  F7 F3					div		ebx

						;Save the result and the remainder
 000001DB  A3 0000022A R				mov		firstDiv, eax
 000001E0  89 15 0000022E R				mov		firstRem, edx
					
						;Multiply the remainder by 2
 000001E6  A1 0000022E R				mov		eax, firstRem
 000001EB  BB 00000002					mov		ebx, 2
 000001F0  F7 E3					mul		ebx

						;save the result into doubRem
 000001F2  A3 00000232 R				mov		doubRem, eax

						;compare the the doubleRem to secondNum and increment firstDiv (round up) if doubleRem is larger
 000001F7  3B 05 00000004 R				cmp		eax, secondNum
 000001FD  7D 59					jge		incrementResult

 000001FF  EB 5F					jmp		displayResult

				;display the 'not bad' message
 00000201  BA 000000EA R		mov		edx, OFFSET notBadMess
 00000206  E8 00000000 E		call	WriteString
 0000020B  E8 00000000 E		call	CrLf

 00000210			restart:	;Check to see if user wants to restart the program
 00000210  BA 0000013D R			mov		edx, OFFSET startAgain
 00000215  E8 00000000 E			call	WriteString
 0000021A  E8 00000000 E			call	ReadChar
 0000021F  E8 00000000 E			call	WriteChar
 00000224  E8 00000000 E			call	ClrScr
 00000229  3C 79				cmp		al, 121
 0000022B  0F 84 FFFFFDCF			jz		startPoint

						;display the goodbye message
 00000231  BA 000000FA R			mov		edx, OFFSET goodbyeMess
 00000236  E8 00000000 E			call	WriteString
 0000023B  E8 00000000 E			call	CrLf
						exit	; exit to operating system
 00000240  6A 00	   *	    push   +000000000h
 00000242  E8 00000000 E   *	    call   ExitProcess


 00000247			lessJump:	;will jump here if the first number is less than the second
 00000247  BA 00000198 R		mov		edx, OFFSET lessThan
 0000024C  E8 00000000 E		call	WriteString
 00000251  E8 00000000 E		call	CrLf
 00000256  EB B8			jmp		restart

 00000258			incrementResult: ;EC #3: Here firstDiv is incremented (rounded up)
 00000258  FF 05 0000022A R		inc		firstDiv
 0000025E  EB 00			jmp		displayResult

 00000260			displayResult: ;EC #3: Here the floating-point value is calculated and displayed
 00000260  A1 0000022A R		mov		eax, firstDiv
 00000265  BB 000003E8			mov		ebx, 1000
 0000026A  99				cdq
 0000026B  F7 F3			div		ebx
 0000026D  89 15 0000023C R		mov		decNum, edx

 00000273  BA 00000240 R		mov		edx, OFFSET ecMess
 00000278  E8 00000000 E		call	WriteString
 0000027D  A3 00000238 R		mov		wholeNum, eax
 00000282  E8 00000000 E		call	WriteDec
 00000287  BA 00000236 R		mov		edx, OFFSET dotMess
 0000028C  E8 00000000 E		call	WriteString
 00000291  A1 0000023C R		mov		eax, decNum
 00000296  E8 00000000 E		call	WriteDec
 0000029B  E8 00000000 E		call	CrLf
 000002A0  E8 00000000 E		call	CrLf
 000002A5  E9 FFFFFF66			jmp		restart

					exit	; exit to operating system
 000002AA  6A 00	   *	    push   +000000000h
 000002AC  E8 00000000 E   *	    call   ExitProcess
 000002B1			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    04/16/17 15:07:54
/Prog01 - Elementary Arithmetic     (Prog01.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000027A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002B1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002B1 Public STDCALL
  startPoint . . . . . . . . . .	L Near	 00000000 _TEXT	
  restart  . . . . . . . . . . .	L Near	 00000210 _TEXT	
  lessJump . . . . . . . . . . .	L Near	 00000247 _TEXT	
  incrementResult  . . . . . . .	L Near	 00000258 _TEXT	
  displayResult  . . . . . . . .	L Near	 00000260 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addResult  . . . . . . . . . . .	DWord	 00000008 _DATA	
again  . . . . . . . . . . . . .	Byte	 0000015F _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
decNum . . . . . . . . . . . . .	DWord	 0000023C _DATA	
diffMess . . . . . . . . . . . .	Byte	 000000CE _DATA	
divResult  . . . . . . . . . . .	DWord	 00000014 _DATA	
dotMess  . . . . . . . . . . . .	Byte	 00000236 _DATA	
doubRem  . . . . . . . . . . . .	DWord	 00000232 _DATA	
ecMess . . . . . . . . . . . . .	Byte	 00000240 _DATA	
equMess  . . . . . . . . . . . .	Byte	 000000DA _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extraCred01  . . . . . . . . . .	Byte	 00000105 _DATA	
extraCred02  . . . . . . . . . .	Byte	 00000160 _DATA	
extraCred03  . . . . . . . . . .	Byte	 000001C9 _DATA	
firstDiv . . . . . . . . . . . .	DWord	 0000022A _DATA	
firstNum . . . . . . . . . . . .	DWord	 00000000 _DATA	
firstRem . . . . . . . . . . . .	DWord	 0000022E _DATA	
goodbyeMess  . . . . . . . . . .	Byte	 000000FA _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro  . . . . . . . . . . . . .	Byte	 0000004F _DATA	
lessThan . . . . . . . . . . . .	Byte	 00000198 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mulResult  . . . . . . . . . . .	DWord	 00000010 _DATA	
notBadMess . . . . . . . . . . .	Byte	 000000EA _DATA	
prodMess . . . . . . . . . . . .	Byte	 000000D2 _DATA	
prompt01 . . . . . . . . . . . .	Byte	 000000AB _DATA	
prompt02 . . . . . . . . . . . .	Byte	 000000BA _DATA	
quotMess . . . . . . . . . . . .	Byte	 000000D6 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remMess  . . . . . . . . . . . .	Byte	 000000DE _DATA	
remResult  . . . . . . . . . . .	DWord	 00000018 _DATA	
secondNum  . . . . . . . . . . .	DWord	 00000004 _DATA	
startAgain . . . . . . . . . . .	Byte	 0000013D _DATA	
subResult  . . . . . . . . . . .	DWord	 0000000C _DATA	
sumMess  . . . . . . . . . . . .	Byte	 000000CA _DATA	
titleMess  . . . . . . . . . . .	Byte	 0000001C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wholeNum . . . . . . . . . . . .	DWord	 00000238 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
